import{_ as s,o as a,c as n,O as l}from"./chunks/framework.64ff6dc7.js";const F=JSON.parse('{"title":"在 FiberScheduler 中的全局变量","description":"","frontmatter":{},"headers":[],"relativePath":"framework/react/16.8.6/q7.md","lastUpdated":1681906497000}'),e={name:"framework/react/16.8.6/q7.md"},o=l(`<h1 id="在-fiberscheduler-中的全局变量" tabindex="-1">在 FiberScheduler 中的全局变量 <a class="header-anchor" href="#在-fiberscheduler-中的全局变量" aria-label="Permalink to &quot;在 FiberScheduler 中的全局变量&quot;">​</a></h1><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// Used to ensure computeUniqueAsyncExpiration is monotonically increasing.</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> lastUniqueAsyncExpiration</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Represents the expiration time that incoming updates should use. (If this</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// is NoWork, use the default strategy: async updates in async mode, sync</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// updates in sync mode.)</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> expirationContext</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ExpirationTime</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> NoWork</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> isWorking</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// The next work in progress fiber that we&#39;re currently working on.</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> nextUnitOfWork</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Fiber</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> nextRoot</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">FiberRoot</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// The time at which we&#39;re currently rendering work.</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> nextRenderExpirationTime</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ExpirationTime</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> NoWork</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> nextLatestAbsoluteTimeoutMs</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> nextRenderDidError</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// The next fiber with an effect that we&#39;re currently committing.</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> nextEffect</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Fiber</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> isCommitting</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> legacyErrorBoundariesThatAlreadyFailed</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Set</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">mixed</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Used for performance tracking.</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> interruptedBy</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Fiber</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null</span></span></code></pre></div><h2 id="lastuniqueasyncexpiration" tabindex="-1">lastUniqueAsyncExpiration <a class="header-anchor" href="#lastuniqueasyncexpiration" aria-label="Permalink to &quot;lastUniqueAsyncExpiration&quot;">​</a></h2><p>在createBatch中有调用，但是没发现createBatch在哪里被调用，所以，目前没发现什么作用。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">computeUniqueAsyncExpiration</span><span style="color:#89DDFF;">():</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ExpirationTime</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">currentTime</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">requestCurrentTime</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">computeAsyncExpiration</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">currentTime</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">lastUniqueAsyncExpiration</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">lastUniqueAsyncExpiration</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">lastUniqueAsyncExpiration</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">result</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">lastUniqueAsyncExpiration</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="expirationcontext" tabindex="-1">expirationContext <a class="header-anchor" href="#expirationcontext" aria-label="Permalink to &quot;expirationContext&quot;">​</a></h2><p>保存创建expirationTime的上下文，在syncUpdates和deferredUpdates中分别被设置为Sync和AsyncExpirationTime，在有这个上下文的时候任何更新计算出来的过期时间都等于expirationContext。<br>比如调用ReactDOM.flushSync的时候，他接受的回调中的setState</p><h2 id="isworking" tabindex="-1">isWorking <a class="header-anchor" href="#isworking" aria-label="Permalink to &quot;isWorking&quot;">​</a></h2><p>commitRoot和renderRoot开始都会设置为true，然后在他们各自阶段结束的时候都重置为false<br><strong>用来标志是否当前有更新正在进行，不区分阶段</strong></p><h2 id="iscommitting" tabindex="-1">isCommitting <a class="header-anchor" href="#iscommitting" aria-label="Permalink to &quot;isCommitting&quot;">​</a></h2><p>commitRoot开头设置为true，结束之后设置为false<br><strong>用来标志是否处于commit阶段</strong></p><h2 id="nextunitofwork" tabindex="-1">nextUnitOfWork <a class="header-anchor" href="#nextunitofwork" aria-label="Permalink to &quot;nextUnitOfWork&quot;">​</a></h2><p>用于记录render阶段Fiber树遍历过程中下一个需要执行的节点。<br>在resetStack中分别被重置<br>他只会指向workInProgress</p><h2 id="nextroot-nextrenderexpirationtime" tabindex="-1">nextRoot &amp; nextRenderExpirationTime <a class="header-anchor" href="#nextroot-nextrenderexpirationtime" aria-label="Permalink to &quot;nextRoot &amp; nextRenderExpirationTime&quot;">​</a></h2><p>用于记录<strong>下一个将要渲染的root节点</strong>和<strong>下一个要渲染的任务的</strong><br>在renderRoot开始的时候赋值，需要符合如下条件才会重新赋值</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (</span></span>
<span class="line"><span style="color:#A6ACCD;">  expirationTime </span><span style="color:#89DDFF;">!==</span><span style="color:#A6ACCD;"> nextRenderExpirationTime </span><span style="color:#89DDFF;">||</span></span>
<span class="line"><span style="color:#A6ACCD;">  root </span><span style="color:#89DDFF;">!==</span><span style="color:#A6ACCD;"> nextRoot </span><span style="color:#89DDFF;">||</span></span>
<span class="line"><span style="color:#A6ACCD;">  nextUnitOfWork </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null</span></span>
<span class="line"><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">resetStack</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">nextRoot</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">root</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">nextRenderExpirationTime</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">expirationTime</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">nextUnitOfWork</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">createWorkInProgress</span><span style="color:#F07178;">(</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">nextRoot</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">current</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">null,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">nextRenderExpirationTime</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  )</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>解释一下就是说，只有这一次调用renderRoot的时候，有</p><ul><li>新的root要渲染</li><li>相同的root但是任务有不同优先级的任务要渲染</li><li>或者在老的任务上没有下一个节点需要渲染了</li></ul><h2 id="nextlatestabsolutetimeoutms" tabindex="-1">nextLatestAbsoluteTimeoutMs <a class="header-anchor" href="#nextlatestabsolutetimeoutms" aria-label="Permalink to &quot;nextLatestAbsoluteTimeoutMs&quot;">​</a></h2><p>用来记录Suspense组件何时重新尝试渲染，涉及复杂的公式，这里就不详细说了。<br>可以看<a href="https://react.jokcy.me/book/flow/render-root.html" target="_blank" rel="noreferrer">renderRoot</a></p><h2 id="nextrenderdiderror" tabindex="-1">nextRenderDidError <a class="header-anchor" href="#nextrenderdiderror" aria-label="Permalink to &quot;nextRenderDidError&quot;">​</a></h2><p>用于记录当前render流程是否有错误产生<br>resetStack重置为false<br>在throwException中如果发现了不能直接处理的错误（除了 Promise 之外），那么就调用renderDidError设置为true</p><h2 id="nexteffect" tabindex="-1">nextEffect <a class="header-anchor" href="#nexteffect" aria-label="Permalink to &quot;nextEffect&quot;">​</a></h2><p>用于commit阶段记录firstEffect -&gt; lastEffect链遍历过程中的每一个Fiber</p><h2 id="interruptedby" tabindex="-1">interruptedBy <a class="header-anchor" href="#interruptedby" aria-label="Permalink to &quot;interruptedBy&quot;">​</a></h2><p>给开发工具用的，用来展示被哪个节点打断了异步任务</p><h1 id="跟调度有关的全局变量" tabindex="-1">跟调度有关的全局变量 <a class="header-anchor" href="#跟调度有关的全局变量" aria-label="Permalink to &quot;跟调度有关的全局变量&quot;">​</a></h1><p>ReactFiberScheduler.js 1797-1826</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// Linked-list of roots</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> firstScheduledRoot</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">FiberRoot</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> lastScheduledRoot</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">FiberRoot</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> callbackExpirationTime</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ExpirationTime</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> NoWork</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> callbackID</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> *</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> isRendering</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> nextFlushedRoot</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">FiberRoot</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> nextFlushedExpirationTime</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ExpirationTime</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> NoWork</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> lowestPriorityPendingInteractiveExpirationTime</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ExpirationTime</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> NoWork</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> deadlineDidExpire</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> hasUnhandledError</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> unhandledError</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">mixed</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> deadline</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Deadline</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> isBatchingUpdates</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> isUnbatchingUpdates</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> isBatchingInteractiveUpdates</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> completedBatches</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Array</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Batch</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> originalStartTimeMs</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">now</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> currentRendererTime</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ExpirationTime</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">msToExpirationTime</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  originalStartTimeMs</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> currentSchedulerTime</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ExpirationTime</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> currentRendererTime</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Use these to prevent an infinite loop of nested updates</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> NESTED_UPDATE_LIMIT </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">50</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> nestedUpdateCount</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> lastCommittedRootDuringThisBatch</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">FiberRoot</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null</span></span></code></pre></div><h2 id="firstscheduledroot-lastscheduledroot" tabindex="-1">firstScheduledRoot &amp; lastScheduledRoot <a class="header-anchor" href="#firstscheduledroot-lastscheduledroot" aria-label="Permalink to &quot;firstScheduledRoot &amp; lastScheduledRoot&quot;">​</a></h2><p>用于存放有任务的所有root的单列表结构</p><ul><li>在findHighestPriorityRoot用来检索优先级最高的root</li><li>在addRootToSchedule中会修改</li></ul><p>在findHighestPriorityRoot中会判断root的expirationTime，并不会直接删除root</p><h2 id="callbackexpirationtime-callbackid" tabindex="-1">callbackExpirationTime &amp; callbackID <a class="header-anchor" href="#callbackexpirationtime-callbackid" aria-label="Permalink to &quot;callbackExpirationTime &amp; callbackID&quot;">​</a></h2><p>记录请求ReactScheduler的时候用的过期时间，如果在一次调度期间有新的调度请求进来了，而且优先级更高，那么需要取消上一次请求，如果更低则无需再次请求调度。<br>callbackID是ReactScheduler返回的用于取消调度的 ID</p><h2 id="isrendering" tabindex="-1">isRendering <a class="header-anchor" href="#isrendering" aria-label="Permalink to &quot;isRendering&quot;">​</a></h2><p>performWorkOnRoot开始设置为true，结束的时候设置为false，表示进入渲染阶段，这是包含render和commit阶段的。</p><h2 id="nextflushedroot-nextflushedexpirationtime" tabindex="-1">nextFlushedRoot &amp; nextFlushedExpirationTime <a class="header-anchor" href="#nextflushedroot-nextflushedexpirationtime" aria-label="Permalink to &quot;nextFlushedRoot &amp; nextFlushedExpirationTime&quot;">​</a></h2><p>用来标志下一个需要渲染的root和对应的expirtaionTime，注意：</p><ul><li>通过findHighestPriorityRoot找到最高优先级的</li><li>通过flushRoot会直接设置指定的，不进行筛选</li></ul><h2 id="lowestprioritypendinginteractiveexpirationtime" tabindex="-1">lowestPriorityPendingInteractiveExpirationTime <a class="header-anchor" href="#lowestprioritypendinginteractiveexpirationtime" aria-label="Permalink to &quot;lowestPriorityPendingInteractiveExpirationTime&quot;">​</a></h2><p>类似expirationContext，用来存储interactiveUpdates产生的最小的expirationTime，在下一次外部指定的interactiveUpdates情况下会强制输出上一次的interactiveUpdates，<strong>因为interactiveUpdates主要是用户输入之类的操作，如果不及时输出会给用户造成断层感</strong><br>可以通过调用ReactDOM.unstable_interactiveUpdates来实现以上目的</p><h2 id="deadline-deadlinedidexpire" tabindex="-1">deadline &amp; deadlineDidExpire <a class="header-anchor" href="#deadline-deadlinedidexpire" aria-label="Permalink to &quot;deadline &amp; deadlineDidExpire&quot;">​</a></h2><p>deadline是ReactScheduler中返回的时间片调度信息对象<br>用于记录是否时间片调度是否过期，在shouldYield根据deadline是否过期来设置</p><h2 id="hasunhandlederror-unhandlederror" tabindex="-1">hasUnhandledError &amp; unhandledError <a class="header-anchor" href="#hasunhandlederror-unhandlederror" aria-label="Permalink to &quot;hasUnhandledError &amp; unhandledError&quot;">​</a></h2><p>Profiler调试相关</p><h2 id="isbatchingupdates-isunbatchingupdates-isbatchinginteractiveupdates" tabindex="-1">isBatchingUpdates &amp; isUnbatchingUpdates &amp; isBatchingInteractiveUpdates <a class="header-anchor" href="#isbatchingupdates-isunbatchingupdates-isbatchinginteractiveupdates" aria-label="Permalink to &quot;isBatchingUpdates &amp; isUnbatchingUpdates &amp; isBatchingInteractiveUpdates&quot;">​</a></h2><p>batchedUpdates、unBatchedUpdates，deferredUpdates、interactiveUpdates等这些方法用来存储更新产生的上下文的变量</p><h2 id="originalstarttimems" tabindex="-1">originalStartTimeMs <a class="header-anchor" href="#originalstarttimems" aria-label="Permalink to &quot;originalStartTimeMs&quot;">​</a></h2><p>固定值，js 加载完一开始计算的结果</p><h2 id="currentrenderertime-currentschedulertime" tabindex="-1">currentRendererTime &amp; currentSchedulerTime <a class="header-anchor" href="#currentrenderertime-currentschedulertime" aria-label="Permalink to &quot;currentRendererTime &amp; currentSchedulerTime&quot;">​</a></h2><p>计算从页面加载到现在为止的毫秒数，后者会在isRendering === true的时候用作固定值返回，不然每次requestCurrentTime都会重新计算新的时间。</p><h2 id="nestedupdatecount-lastcommittedrootduringthisbatch" tabindex="-1">nestedUpdateCount &amp; lastCommittedRootDuringThisBatch <a class="header-anchor" href="#nestedupdatecount-lastcommittedrootduringthisbatch" aria-label="Permalink to &quot;nestedUpdateCount &amp; lastCommittedRootDuringThisBatch&quot;">​</a></h2><p>用来记录是否有嵌套得再生命周期方法中产生更新导致应用无限循环更新得计数器，用于提醒用户书写的不正确的代码。</p>`,54),p=[o];function t(r,c,i,y,C,D){return a(),n("div",null,p)}const d=s(e,[["render",t]]);export{F as __pageData,d as default};
